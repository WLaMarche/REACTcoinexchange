{"version":3,"sources":["components/AccountBalance/AccountBalance.js","components/Coin/Coin.js","components/CoinList/CoinList.jsx","components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","styled","section","Button","button","AccountBalance","props","hideOrShow","showBalance","content","amount","onClick","balanceVisibility","pumpBalance","TableData","td","BuyButton","SellButton","CoinInfoButton","Coin","rank","name","ticker","price","allTimeHigh","percFromATH","dailyPercent","balance","action","method","event","preventDefault","handleBuy","valueChangeId","handleSell","coinInfo","Table","table","CoinList","coinData","map","value","key","Header","header","H1","h1","ExchangeHeader","src","logo","className","alt","Component","Div","div","App","React","useState","setBalance","setshowBalance","setcoinData","componentDidMount","a","axios","get","response","coinIDs","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","ath_price","toFixed","percent_from_price_ath","percent_change_7d","useEffect","length","oldshowBalance","newCoinData","values","oldValues","parseFloat","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.764c5fac.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n  font-size: 32px;\n  text-shadow: 0 -1px 4px #FFF, 0 -2px 10px #00EBC3, 0 -10px 20px #008080, 0 -18px 40px #00EBC3;\n  font-family: Papyrus, sans-serif;\n  color: #FAF2E1;\n  margin: 25px;\n  margin:auto;\n`\nconst Button = styled.button`\n    background-color: #B3FFE5;\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\n    font-size: 12 px;\n    width: 100px;\n    line-height: 12 px;\n    padding: 10px;\n    border-radius: 5px;\n    margin: 3px 5px 0;\n    border: 2px solid rgb(28, 110, 164);\n    cursor: pointer;\n    vertical-align: top;\n    transition-duration: 0.4s;\n    &:hover {\n    background-color: #7AAD9C;\n  }\n`;\n\n/*border: 1px solid #000;\nvertical-align: top;\nbackground: grey;\nheight: 50px;\nwidth: 100px;\nfont-size: 1.5rem;\ntext-align: center;\npadding: 0rem 1rem 0rem 1rem;\nfont-size: 16px;\nbackground-color: #99CCFF;\ncursor:pointer;\nmax-width:100%;\nmargin:auto;\n*/\n\nfunction AccountBalance(props) {\n    //using an if statement, represented as a variable\n    //since we have set showBalance to true (in App.js), Hide balance is true state\n    //else, hide balance is clicked already and it will then become Show Balance\n    const hideOrShow = props.showBalance ? 'Hide Balance' : 'Show Balance';\n    let content = null;\n      if(props.showBalance){\n        content = <div>${props.amount}</div>\n      }\n\n    return (\n      <Section>\n        Account Balance:\n          {content}\n            <Button onClick = {props.balanceVisibility}>{hideOrShow}</Button>\n            <Button onClick = {props.pumpBalance}>Stimmy Check!</Button>\n      </Section>\n    );\n  }\n\nAccountBalance.propTypes = {\n  amount: PropTypes.number,\n}\n\nexport default AccountBalance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n/*const TD = styled.td`\n  border: 1px solid #E6EAFF;\n  width: 15vh;\n`;\n\nconst Buy = styled.buy`\n  background-color: #f44336;\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n`;*/\n/*const SellButton = styled.sellButton`\n  background-color: #f44336;\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n`\n*/\n\nconst TableData = styled.td`\n    border: 1px solid;\n    width: 36vh;\n    color: dimgray;\n    background-color: #FAF2E1;\n    text-align: center;\n    margin: 50px auto 50px auto;\n    font-size: 1.2rem;\n\n`;\nconst TDControl = styled(TableData)`\n    width: 36vw;\n`;\n\nconst BuyButton = styled.button`\n    background-color: #32C48F;\n    font-size: 12 px;\n    width: 64px;\n    line-height: 12 px;\n    padding: 4px;\n    border-radius: 5px;\n    margin: 3px 5px 0;\n    border: 2px solid rgb(28, 110, 164);\n    cursor: pointer;\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\n    transition-duration: 0.4s;\n    &:hover {\n    background-color: #289C71;\n  }\n`;\n\nconst SellButton = styled.button`\n    background-color: #EB8976;\n    font-size: 12 px;\n    width: 64px;\n    line-height: 12 px;\n    padding: 4px;\n    border-radius: 5px;\n    margin: 3px 5px 0;\n    border: 2px solid rgb(28, 110, 164);\n    cursor: pointer;\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\n    transition-duration: 0.4s;\n    &:hover {\n    background-color: #B3685A;\n  }\n`;\n\nconst CoinInfoButton = styled.button`\n    background-color: #B3FFE5;\n    font-size: 12 px;\n    width: 75px;\n    line-height: 12 px;\n    padding: 4px;\n    border-radius: 5px;\n    margin: 3px 5px 0;\n    border: 2px solid rgb(28, 110, 164);\n    cursor: pointer;\n    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);\n    transition-duration: 0.4s;\n    &:hover {\n    background-color: #7AAD9C;\n  }\n`;\n\n\nfunction Coin(props) {\n    //.bind helps us bind the handleClick function that's outside of this constructor\n    //into what's inside the constructor, access properties & set a new value (in this case, price)\n\n\n  /*componentDidMount(){\n    const callback = () => {\n      const randomPercent = 0.995 + Math.random() * 0.01;\n      //can't set this.state.price because it's already initialized\n      //we use another function called 'this.setState' that inherently accesses current state and can re-initialize this.state\n      //follow format below\n      this.setState(({coinData : price}){\n        //return the price as the object that it already is\n        return {\n          price: (price * randomPercent).toFixed(2)\n        };\n      });\n    }\n    //now, we use the callback we created\n    setInterval(callback, 5000);\n  } */\n\n  const handleBuy = (event) => {\n    event.preventDefault();\n\n    props.handleBuy(props.valueChangeId);\n  }\n\n  const handleSell = (event) => {\n    event.preventDefault();\n\n    props.handleSell(props.valueChangeId);\n  }\n\n  const coinInfo = (event) => {\n    event.preventDefault();\n\n    props.coinInfo(props.valueChangeId);\n  }\n\n    return (\n      <tr>\n        <TableData>{props.rank}</TableData>\n        <TableData>{props.name}</TableData>\n        <TableData>{props.ticker}</TableData>\n        <TableData>${props.price}</TableData>\n        <TableData>${props.allTimeHigh}</TableData>\n        <TableData>{props.percFromATH}%</TableData>\n        <TableData>{props.dailyPercent}%</TableData>\n        {props.showBalance ? <TableData>{props.balance}</TableData> : <TableData>***</TableData>}\n        <TableData>\n          <form action=\"#\" method=\"POST\">\n            <BuyButton onClick={handleBuy}>Buy</BuyButton>\n          </form>\n          <form action=\"#\" method=\"POST\">\n            <SellButton onClick={handleSell}>Sell</SellButton>\n          </form>\n        </TableData>\n        <TableData><form action=\"#\" method=\"POST\">\n          <CoinInfoButton onClick={coinInfo}>Coin Update!</CoinInfoButton>\n        </form>\n        </TableData>\n      </tr>\n    );\n}\n\nCoin.propTypes = {\n  name: PropTypes.string.isRequired,\n  ticker: PropTypes.string,\n  price: PropTypes.number,\n  supply: PropTypes.number,\n}\n\nexport default Coin;\n","import React from 'react';\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components';\n\nconst Table = styled.table`\nmargin: 50px;\ndisplay: inline-block;`\n\n\nfunction CoinList(props) {\n      return(\n        <Table>\n          <thead>\n            <tr>\n              <th> Rank </th>\n              <th> Name </th>\n              <th> Ticker </th>\n              <th> Price </th>\n              <th> All Time High </th>\n              <th> % from ATH </th>\n              <th> 24hr % </th>\n              <th> Balance </th>\n              <th> Buy/Sell </th>\n              <th> Coin Info </th>\n            </tr>\n            </thead>\n              <tbody>\n              {props.coinData.map(\n                  (value => <Coin\n                    key={value.name}\n                    handleBuy={props.handleBuy}\n                    handleSell={props.handleSell}\n                    rank={value.rank}\n                    name={value.name}\n                    ticker={value.ticker}\n                    price={value.price}\n                    allTimeHigh = {value.allTimeHigh}\n                    percFromATH = {value.percFromATH}\n                    dailyPercent = {value.dailyPercent}\n                    showBalance = {props.showBalance}\n                    balance={value.balance}\n                    coinInfo= {props.coinInfo}\n                    valueChangeId={value.key}\n                    />)\n                )\n              }\n              </tbody>\n          </Table>\n      )\n    }\n\nexport default CoinList;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react';\nimport './LogoRotator.css';\nimport logo from './logo.svg';\nimport styled from 'styled-components';\n\nconst Header = styled.header`\n  background-color: #2DB080;\n  min-height: 50vh;\n  display: flex;\n  flex-direction: column;\n  font-family: Papyrus, monospace;\n  text-shadow: 0 0 5px #FFF, 0 0 10px #2DB080, 0 0 15px #FFF, 0 0 20px #2DB080, 0 0 30px #2DB080, 0 0 40px #2DB080, 0 0 55px #006666, 0 0 75px #49ff18;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: #FAF2E1;\n\n`\nconst H1 = styled.h1`\n  font-size: 2.5rem;\n`\nclass ExchangeHeader extends Component {\n    render(){\n      return(\n        <Header>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <H1>\n            Decentralized Crypto Asset Trading Exchange\n          </H1>\n        </Header>\n      )\n    }\n}\n\nexport default ExchangeHeader;\n","import React from 'react';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport CoinList from './components/CoinList/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: #2DB080;\n  color: #E6EAFF;\n  `\n\nconst COIN_COUNT = 10;\n\nfunction App(props) {\n  /*state = {\n    balance: 10000,\n    showBalance: true,\n    coinData: []\n  }*/\n  //in order to create a class into a function, we can't use a state anymore\n    //instead, you create const variables with a useState\n\nconst [balance, setBalance] = React.useState(10000);\nconst [showBalance, setshowBalance] = React.useState(true);\nconst [coinData, setcoinData] = React.useState([]);\nconst [coinNews, setcoinNews] = React.useState([]);\n\nconst componentDidMount = async () => {\n  //const callback = async() => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins/');\n    //creating a variable that gets the response.data ID's of coin, and slicing to read only array elements 0-9\n    const coinIDs = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    //get prices API\n    const tickerURL = 'https://api.coinpaprika.com/v1/tickers/';\n    //create a variable that goes into the mapping of coinIDs array\n      //the mapping is a function that starts with the \"id\"\" element\n      //runs the function of getting the coinpaprika API for tickers, + id\n        //the API is tickerURL/coinID.. ex (https://api.coinpaprika.com/v1/tickers/btc-bitcoin)\n    const promises = coinIDs.map(id => axios.get(tickerURL + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return{\n        key: coin.id,\n        id: coin.id,\n        rank: coin.rank,\n        name: coin.name,\n        ticker: coin.symbol,\n        allTimeHigh: (coin.quotes.USD.ath_price).toFixed(2),\n        percFromATH: coin.quotes.USD.percent_from_price_ath,\n        dailyPercent: coin.quotes.USD.percent_change_7d,\n        balance: 0,\n        price: (coin.quotes.USD.price).toFixed(2),\n      };\n    })\n    //instead of \"setState,\" we use our useState function for coinData to set the new CoinData (coinPriceData)\n    setcoinData(coinPriceData);\n  //}\n  //setInterval(callback, 10000);\n  }\n\nReact.useEffect(() => {\n  if(coinData.length === 0){\n    componentDidMount();\n  }});\n\n  const balanceVisibility = () => {\n    setshowBalance(oldshowBalance => !oldshowBalance);\n  }\n\n  const pumpBalance = () => {\n    setBalance(balance + 1200);\n  }\n\n  /*const handleUpdatePrice = async(valueChangeId) => {\n    const tickerURL = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerURL);\n    const newprice = (response.data.quotes.USD.price).toFixed(2);\n    const newCoinData = coinData.map(function(values){\n      let oldValues = {...values};\n      if (valueChangeId === values.key){\n        oldValues.price = newprice;\n    }\n    return oldValues;\n  });\n  setcoinData(newCoinData);\n} */\n\nconst handleBuy = (valueChangeId, price) => {\n  const newCoinData = coinData.map(values => {\n    let oldValues = {...values};\n\n    if(valueChangeId === oldValues.key){\n      if(balance >= oldValues.price){\n      oldValues.balance += 1;\n      setBalance(parseFloat(balance) - parseFloat(oldValues.price));}\n      else{\n        alert(\"Insufficienct funds to buy \" + oldValues.name + \". Cash that stimmy check!\");\n      }}\n    return oldValues;\n  })\n  setcoinData(newCoinData);\n}\n\nconst handleSell = (valueChangeId, price) => {\n  const newCoinData = coinData.map(values => {\n    let oldValues = {...values};\n\n    if(valueChangeId === oldValues.key){\n      if(oldValues.balance > 0){\n      oldValues.balance -= 1;\n      setBalance(parseFloat(balance) + parseFloat(oldValues.price));\n    }\n    else{\n      alert(\"You don't have enough \" + oldValues.name + \" to sell!\");\n    }\n  }\n    return oldValues;\n  });\n  setcoinData(newCoinData);\n}\n\nconst coinInfo = () => {\n  alert(\"Functionality in progress!\");\n}\n\n\n    return (\n      <Div>\n          <ExchangeHeader/>\n          <AccountBalance\n            amount= {balance}\n            showBalance={showBalance}\n            balanceVisibility= {balanceVisibility}\n            pumpBalance= {pumpBalance}/>\n          <CoinList\n            coinData= {coinData}\n            showBalance = {showBalance}\n            handleBuy={handleBuy}\n            handleSell={handleSell}\n            coinInfo= {coinInfo}\n            />\n      </Div>\n    );\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}