{"version":3,"sources":["components/AccountBalance/AccountBalance.js","components/Coin/Coin.js","components/CoinList/CoinList.jsx","components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","styled","section","AccountBalance","props","hideOrShow","showBalance","content","amount","onClick","balanceVisibility","pumpBalance","TD","td","Coin","rank","name","ticker","price","marketCap","balance","action","method","event","preventDefault","handleUpdatePrice","valueChangeId","Table","table","CoinList","coinData","map","value","key","Header","header","H1","h1","ExchangeHeader","src","logo","className","alt","Component","Div","div","App","React","useState","setBalance","setshowBalance","setcoinData","componentDidMount","a","setInterval","axios","get","response","coinIDs","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","market_cap","toFixed","useEffect","length","tickerURL","newprice","newCoinData","values","oldValues","oldshowBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8338a928.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n  font-size: 24px;\n  margin: 25px;\n`\n\n\nfunction AccountBalance(props) {\n    //using an if statement, represented as a variable\n    //since we have set showBalance to true (in App.js), Hide balance is true state\n    //else, hide balance is clicked already and it will then become Show Balance\n    const hideOrShow = props.showBalance ? 'Hide Balance' : 'Show Balance';\n    let content = null;\n      if(props.showBalance){\n        content = <div>${props.amount}</div>\n      }\n\n    return (\n      <Section>\n        Account Balance:\n          {content}\n            <button onClick = {props.balanceVisibility}>{hideOrShow}</button>\n            <button onClick = {props.pumpBalance}>Stimulus Check!</button>\n      </Section>\n    );\n  }\n\nAccountBalance.propTypes = {\n  amount: PropTypes.number,\n}\n\nexport default AccountBalance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst TD = styled.td`\n  border: 1px solid #E6EAFF;\n  width: 15vh;\n`\n\n\nfunction Coin(props) {\n    //.bind helps us bind the handleClick function that's outside of this constructor\n    //into what's inside the constructor, access properties & set a new value (in this case, price)\n\n\n  /*componentDidMount(){\n    const callback = () => {\n      const randomPercent = 0.995 + Math.random() * 0.01;\n      //can't set this.state.price because it's already initialized\n      //we use another function called 'this.setState' that inherently accesses current state and can re-initialize this.state\n      //follow format below\n      this.setState(({coinData : price}){\n        //return the price as the object that it already is\n        return {\n          price: (price * randomPercent).toFixed(2)\n        };\n      });\n    }\n    //now, we use the callback we created\n    setInterval(callback, 5000);\n  } */\n\n  const handleClick = (event) => {\n    event.preventDefault();\n\n    props.handleUpdatePrice(props.valueChangeId);\n  }\n\n    return (\n      <tr>\n        <TD>{props.rank}</TD>\n        <TD>{props.name}</TD>\n        <TD>{props.ticker}</TD>\n        <TD>${props.price}</TD>\n        <TD>${props.marketCap}</TD>\n        {props.showBalance ? <TD>{props.balance}</TD> : <TD>***</TD>}\n        <TD>\n          <form action=\"#\" method=\"POST\">\n            <button onClick={handleClick}>Update Price</button>\n            </form>\n        </TD>\n      </tr>\n    );\n}\n\nCoin.propTypes = {\n  name: PropTypes.string.isRequired,\n  ticker: PropTypes.string,\n  price: PropTypes.number,\n  supply: PropTypes.number,\n}\n\nexport default Coin;\n","import React from 'react';\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components';\n\nconst Table = styled.table`\nmargin: 50px;\ndisplay: inline-block;`\n\n\nfunction CoinList(props) {\n      return(\n        <Table>\n          <thead>\n            <tr>\n              <th> Rank </th>\n              <th> Name </th>\n              <th> Ticker </th>\n              <th> Price </th>\n              <th> Market Cap </th>\n              <th> Balance </th>\n            </tr>\n            </thead>\n              <tbody>\n              {props.coinData.map(\n                  (value => <Coin\n                    key={value.name}\n                    handleUpdatePrice={props.handleUpdatePrice}\n                    rank={value.rank}\n                    name={value.name}\n                    ticker={value.ticker}\n                    price={value.price}\n                    marketCap = {value.marketCap}\n                    showBalance = {props.showBalance}\n                    balance={value.balance}\n                    valueChangeId={value.key}\n                    />)\n                )\n              }\n              </tbody>\n          </Table>\n      )\n    }\n\nexport default CoinList;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react';\nimport './LogoRotator.css';\nimport logo from './logo.svg';\nimport styled from 'styled-components';\n\nconst Header = styled.header`\n  background-color: #090033;\n  min-height: 50vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: #E6EAFF;\n`\nconst H1 = styled.h1`\n  font-size: 4rem;\n`\n\nclass ExchangeHeader extends Component {\n    render(){\n      return(\n        <Header>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <H1>\n            Decentralized Trading Exchange\n          </H1>\n        </Header>\n      )\n    }\n}\n\nexport default ExchangeHeader;\n","import React from 'react';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport CoinList from './components/CoinList/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: #440066;\n  color: #E6EAFF;\n  `\n\nconst COIN_COUNT = 10;\n\nfunction App(props) {\n  /*state = {\n    balance: 10000,\n    showBalance: true,\n    coinData: []\n  }*/\n  //in order to create a class into a function, we can't use a state anymore\n    //instead, you create const variables with a useState\nconst [balance, setBalance] = React.useState(10000);\nconst [showBalance, setshowBalance] = React.useState(true);\nconst [coinData, setcoinData] = React.useState([]);\n\nconst componentDidMount = async () => {\n  const callback = async() => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins/');\n    //creating a variable that gets the response.data ID's of coin, and slicing to read only array elements 0-9\n    const coinIDs = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    //get prices API\n    const tickerURL = 'https://api.coinpaprika.com/v1/tickers/';\n    //create a variable that goes into the mapping of coinIDs array\n      //the mapping is a function that starts with the \"id\"\" element\n      //runs the function of getting the coinpaprika API for tickers, + id\n        //the API is tickerURL/coinID.. ex (https://api.coinpaprika.com/v1/tickers/btc-bitcoin)\n    const promises = coinIDs.map(id => axios.get(tickerURL + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return{\n        key: coin.id,\n        id: coin.id,\n        rank: coin.rank,\n        name: coin.name,\n        ticker: coin.symbol,\n        marketCap: coin.quotes.USD.market_cap,\n        balance: 0,\n        price: (coin.quotes.USD.price).toFixed(2),\n      };\n    })\n    //instead of \"setState,\" we use our useState function for coinData to set the new CoinData (coinPriceData)\n    setcoinData(coinPriceData);\n  }\n  setInterval(callback, 10000);\n  }\n\nReact.useEffect(() => {\n  if(coinData.length === 0){\n    componentDidMount();\n  }});\n\n  const balanceVisibility = () => {\n    setshowBalance(oldshowBalance => !oldshowBalance);\n  }\n\n  const pumpBalance = () => {\n    setBalance(balance + 1200);\n  }\n\n  const handleUpdatePrice = async(valueChangeId) => {\n    const tickerURL = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerURL);\n    const newprice = (response.data.quotes.USD.price).toFixed(2);\n    const newCoinData = coinData.map(function(values){\n      let oldValues = {...values};\n      if (valueChangeId === values.key){\n        oldValues.price = newprice;\n    }\n    return oldValues;\n  });\n\n  setcoinData(newCoinData);\n    }\n\n    return (\n      <Div>\n          <ExchangeHeader/>\n          <AccountBalance\n            amount= {balance}\n            showBalance={showBalance}\n            balanceVisibility= {balanceVisibility}\n            pumpBalance= {pumpBalance}/>\n          <CoinList\n            coinData= {coinData}\n            showBalance = {showBalance}\n            handleUpdatePrice={handleUpdatePrice}/>\n      </Div>\n    );\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}